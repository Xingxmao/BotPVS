// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(data));
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    const socialButtonsContainer = document.getElementById('social-buttons');
    data.socialButtons.forEach(button => {
        const buttonElement = document.createElement('a');
        buttonElement.className = 'menu-item';
        buttonElement.href = button.link;
        buttonElement.target = '_blank'; // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Ü—Å–µ—Ç–∏ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        buttonElement.innerHTML = `<i class="${button.icon}"></i><span>${button.text}</span>`;
        socialButtonsContainer.appendChild(buttonElement);
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const mainMenuItemsContainer = document.getElementById('main-menu-items');
    data.mainMenuItems.forEach(item => {
        const menuItem = document.createElement('a');
        menuItem.className = 'menu-item';
        menuItem.href = `#${item.section}`;
        menuItem.innerHTML = `<i class="${item.icon}"></i><span>${item.text}</span>`;
        menuItem.addEventListener('click', (e) => {
            e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            showSection(item.section);
        });
        mainMenuItemsContainer.appendChild(menuItem);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    document.addEventListener('click', (e) => {
        if (e.target.closest('.card')) {
            const card = e.target.closest('.card');
            const sectionId = card.parentElement.parentElement.querySelector('h1').getAttribute('data-section');
            const itemId = card.getAttribute('data-id');
            if (sectionId && itemId) {
                showDetails(sectionId, itemId);
            }
        }
    });
});

let currentPage = 1;
const itemsPerPage = 6; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 6 —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (3 —Ä–µ–ª–∏–∑–∞ √ó 2 —Å—Ç—Ä–æ–∫–∏)

function showSection(sectionId) {
    const mainMenu = document.getElementById('main-menu');
    const dynamicContent = document.getElementById('dynamic-content');
    mainMenu.style.display = 'none';
    dynamicContent.innerHTML = '';

    if (sectionId === 'main-menu') {
        mainMenu.style.display = 'block';
        return;
    }

    const sectionData = data[sectionId];
    if (sectionData) {
        currentPage = 1;
        const paginatedData = sectionData.slice(0, itemsPerPage);

        const sectionHTML = `
            <div class="container">
                <h1 data-section="${sectionId}">${sectionId === 'series' ? 'üé≠ –°–µ—Ä–∏–∞–ª—ã' : sectionId === 'films' ? 'üé¨ –§–∏–ª—å–º—ã' : sectionId === 'animation' ? 'ü§° –ú—É–ª—å—Ç—ã' : 'üò∏ –î–æ—Ä–∞–º—ã'}</h1>
                <div class="card-grid">
                    ${paginatedData.map(item => `
                        <div class="card" data-id="${item.id}" data-section="${sectionId}" onclick="showDetails('${sectionId}', '${item.id}')">
                            <div class="poster-container">
                                <img src="${item.image}" alt="${item.title}">
                            </div>
                            <h3>${item.title}</h3>
                        </div>
                    `).join('')}
                </div>
                ${sectionData.length > itemsPerPage ? `
                    <button class="load-more-button" onclick="loadMore('${sectionId}')">–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ</button>
                ` : ''}
                <a href="#main-menu" class="menu-item back-button" onclick="showSection('main-menu')">
                    <i class="fas fa-arrow-left"></i>
                    <span>–ù–∞–∑–∞–¥</span>
                </a>
            </div>
        `;
        dynamicContent.innerHTML = sectionHTML;
    }
}

function showDetails(sectionId, itemId) {
    const mainMenu = document.getElementById('main-menu');
    const dynamicContent = document.getElementById('dynamic-content');
    mainMenu.style.display = 'none';
    dynamicContent.innerHTML = '';

    const sectionData = data[sectionId];
    if (sectionData) {
        const item = sectionData.find(i => i.id === itemId);
        if (item) {
            const detailsHTML = `
                <div class="details-container">
                    <h1>${item.title}</h1>
                    <div class="poster-container">
                        <img src="${item.image}" alt="${item.title}">
                    </div>
                    <p>${item.description}</p>
                    <div class="details-buttons">
                        ${item.links.map(link => `
                            <a href="${link.link}" target="_blank">
                                <i class="${link.icon}"></i>
                                <span>${link.text}</span>
                            </a>
                        `).join('')}
                    </div>
                    <a href="#main-menu" class="menu-item back-button" onclick="showSection('main-menu')">
                        <i class="fas fa-arrow-left"></i>
                        <span>–ù–∞–∑–∞–¥</span>
                    </a>
                </div>
            `;
            dynamicContent.innerHTML = detailsHTML;
        }
    }
}

function loadMore(sectionId) {
    const sectionData = data[sectionId];
    const dynamicContent = document.getElementById('dynamic-content');
    const startIndex = currentPage * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sectionData.slice(startIndex, endIndex);

    if (paginatedData.length > 0) {
        const cardGrid = dynamicContent.querySelector('.card-grid');
        paginatedData.forEach(item => {
            const cardHTML = `
                <div class="card" data-id="${item.id}" data-section="${sectionId}" onclick="showDetails('${sectionId}', '${item.id}')">
                    <div class="poster-container">
                        <img src="${item.image}" alt="${item.title}">
                    </div>
                    <h3>${item.title}</h3>
                </div>
            `;
            cardGrid.insertAdjacentHTML('beforeend', cardHTML);
        });

        currentPage++;

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        if (endIndex >= sectionData.length) {
            dynamicContent.querySelector('.load-more-button').style.display = 'none';
        }
    }
}

function showDetails(sectionId, itemId) {
    const mainMenu = document.getElementById('main-menu');
    const dynamicContent = document.getElementById('dynamic-content');
    mainMenu.style.display = 'none';
    dynamicContent.innerHTML = '';

    const sectionData = data[sectionId];
    if (sectionData) {
        const item = sectionData.find(i => i.id === itemId);
        if (item) {
            const detailsHTML = `
        <div class="details-container">
            <h1>${item.title}</h1>
            
            ${item.rutubeId ? `
            <div class="rutube-container">
                <iframe src="https://rutube.ru/embed/${item.rutubeId}/" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
                        allowfullscreen>
                </iframe>
            </div>
            ` : ''}
            
            <p>${item.description}</p>
            <div class="details-buttons">
                ${item.links.map(link => `
                    <a href="${link.link}" target="_blank">
                        <i class="${link.icon}"></i>
                        <span>${link.text}</span>
                    </a>
                `).join('')}
            </div>
            <a href="#main-menu" class="menu-item back-button" onclick="showSection('main-menu')">
                <i class="fas fa-arrow-left"></i>
                <span>–ù–∞–∑–∞–¥</span>
                    </a>
                </div>
            `;
            dynamicContent.innerHTML = detailsHTML;
        }
    }
}

// –ü–û–ò–°–ö
function performSearch() {
    const searchText = searchInput.value.toLowerCase();
    const mainMenu = document.getElementById('main-menu');
    const dynamicContent = document.getElementById('dynamic-content');

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–ª–∏–∑—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const allReleases = [
        ...(data.series || []).map(release => ({ ...release, section: 'series' })), // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª 'series'
        ...(data.films || []).map(release => ({ ...release, section: 'films' })),   // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª 'films'
        ...(data.animation || []).map(release => ({ ...release, section: 'animation' })), // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª 'animation'
        ...(data.dorama || []).map(release => ({ ...release, section: 'dorama' }))  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª 'dorama'
    ];

    if (searchText === '') {
        mainMenu.style.display = 'block';
        dynamicContent.innerHTML = '';
        return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–∏–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    const filteredReleases = allReleases.filter(release => 
        release.title.toLowerCase().includes(searchText) || 
        (release.description && release.description.toLowerCase().includes(searchText))
    );

    mainMenu.style.display = 'none';
    dynamicContent.innerHTML = '';

    if (filteredReleases.length > 0) {
        const searchResultsHTML = `
            <div class="container">
                <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h1>
                <div class="card-grid">
                    ${filteredReleases.map(release => `
                        <div class="card" data-id="${release.id}" data-section="${release.section}">
                            <div class="poster-container">
                                <img src="${release.image}" alt="${release.title}">
                            </div>
                            <h3>${release.title}</h3>
                        </div>
                    `).join('')}
                </div>
                <a href="#main-menu" class="menu-item" onclick="showSection('main-menu')">
                    <i class="fas fa-arrow-left"></i>
                    <span>–ù–∞–∑–∞–¥</span>
                </a>
            </div>
        `;
        dynamicContent.innerHTML = searchResultsHTML;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        document.querySelectorAll('.card').forEach(card => {
            card.addEventListener('click', () => {
                const sectionId = card.getAttribute('data-section');
                const itemId = card.getAttribute('data-id');
                showDetails(sectionId, itemId);
            });
        });
    } else {
        dynamicContent.innerHTML = `
            <div class="container">
                <h1>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h1>
                <a href="#main-menu" class="menu-item" onclick="showSection('main-menu')">
                    <i class="fas fa-arrow-left"></i>
                    <span>–ù–∞–∑–∞–¥</span>
                </a>
            </div>
        `;
    }
}

// –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
const searchInput = document.getElementById('search-input');
const searchButton = document.getElementById('search-button');

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
searchButton.addEventListener('click', performSearch);
searchInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
        performSearch();
    }
});

// –ù–æ–≤–∏–Ω–∫–∞
// =============================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í –ù–ê–ß–ê–õ–ï)
// =============================================

function getType(section) {
    const typeMap = {
        series: '–°–µ—Ä–∏–∞–ª',
        films: '–§–∏–ª—å–º',
        animation: '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º',
        dorama: '–î–æ—Ä–∞–º–∞'
    };
    return typeMap[section] || '–î—Ä—É–≥–æ–µ';
}

function formatDate(dateString) {
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    } catch (e) {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞:', dateString);
        return '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
    }
}

// =============================================
// –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ù–û–í–´–• –†–ï–õ–ò–ó–û–í (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô)
// =============================================

function loadFeaturedReleases() {
    const container = document.getElementById('featured-releases');
    if (!container) return;

    try {
        const featuredItems = getFeaturedItems();
        container.innerHTML = generateFeaturedHTML(featuredItems);
        addFeaturedEventListeners();
    } catch (error) {
        handleFeaturedError(container, error);
    }
}

function getFeaturedItems() {
    const sections = ['series', 'films', 'animation', 'dorama'];
    return sections
        .flatMap(section => 
            (data[section] || [])
                .filter(item => item.featured)
                .map(item => ({ ...item, section }))
        )
        .sort((a, b) => {
            const dateCompare = new Date(b.dateAdded) - new Date(a.dateAdded);
            return dateCompare !== 0 ? dateCompare : a.title.localeCompare(b.title);
        })
        .slice(0, 3);
}

function generateFeaturedHTML(items) {
    if (items.length === 0) {
        return '<div class="no-results">–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤</div>';
    }
    
    return items.map(item => `
        <div class="release-item" 
             data-section="${item.section}" 
             data-id="${item.id}">
            <div class="release-info">
                <h3 class="release-title">${item.title}</h3>
                <div class="release-meta">
                    <span class="release-badge ${item.section}">
                        ${getType(item.section)}
                    </span>
                </div>
            </div>
            <button class="watch-btn" aria-label="–°–º–æ—Ç—Ä–µ—Ç—å">
                <i class="fas fa-play"></i>
                <span>–°–º–æ—Ç—Ä–µ—Ç—å</span>
            </button>
        </div>
    `).join('');
}

function addFeaturedEventListeners() {
    document.querySelectorAll('.watch-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const parent = this.closest('.release-item');
            const section = parent.dataset.section;
            const id = parent.dataset.id;
            showDetails(section, id);
        });
    });
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

function handleFeaturedError(container, error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–æ–≤:', error);
    container.innerHTML = `
        <div class="error-message">
            <i class="fas fa-exclamation-triangle"></i>
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        </div>
    `;
}

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´
// =============================================
document.addEventListener('DOMContentLoaded', () => {
    loadFeaturedReleases();
    // –û—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
});


